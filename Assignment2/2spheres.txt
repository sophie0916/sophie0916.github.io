
varying vec3 vPos;                               // Position in image
uniform float uTime;                             // Time
vec3 LDir = normalize(vec3(1.,-sin(uTime),.5));  // Light direction

vec2 raytraceSphere(vec3 V, vec3 W, vec4 S) {
   V -= S.xyz;
   float B = 2. * dot(V, W);
   float C = dot(V, V) - S.w * S.w;
   float discrim = B*B - 4.*C;
   return discrim < 0. ? vec2(-1., -1)
                       : vec2(-B - discrim, -B + discrim) / 2.;
}

void main() {
   vec3 c = vec3(.01,.01,.04);                   // Dark background

   vec3 V = vec3(0.,0.,0.);                      // Ray origin
   vec3 W = normalize(vec3(vPos.xy, -3.));       // Ray direction
   vec4 S = vec4(.5+.05*cos(uTime),.5+.05*sin(uTime),.5+5.*cos(uTime),.5*sin(.01*uTime));  // Animate sphere

   vec3 V1 = vec3(1.,2.,1.);                      // Ray origin
   vec3 W1 = normalize(vec3(vPos.xy, 1.));       // Ray direction
vec4 S1 = vec4(-.5+.05*cos(uTime),-.5+.05*sin(uTime),.5+5.*cos(uTime),.5*sin(.01*uTime));  // Animate sphere

   vec2 t = raytraceSphere(V, W, S);             // Ray trace sphere
vec2 q = raytraceSphere(V1,W1,S1);

   if (t.x > 0.) {
      vec3 P = V + t.x * W;                      // Point on sphere
      vec3 N = normalize(P - S.xyz);             // Surface normal
      float brightness = max(0., dot(N, LDir));
      brightness = mix(.1, brightness, .5);      // Diffuse surface
      c = vec3(.1,1.,.1) * brightness;

vec3 P1 = V1 + q.x * W1;                      // Point on sphere
      vec3 N1 = normalize(P1 - S1.xyz);             // Surface normal
      float brightness1 = max(0., dot(N1, LDir));
      brightness1 = mix(.1, brightness1, .5);      // Diffuse surface
      c = vec3(.1,1.,.1) * brightness1;
   }

   gl_FragColor = vec4(sqrt(c), 1.);             // Final pixel color
}
